from aiogram import types, Dispatcher
from aiogram.utils.markdown import hunderline, hlink
from bot_creation import client, dispatcher
from buttons import keyboard_client, inline_kb_client, keyboard_commands
import texts
from sq_database import SQ
import json
from sirius_site import check_news_update


db = SQ('database.db')


async def command_start(message: types.Message):
    photo = open('papich.webp', 'rb')
    await client.send_photo(message.from_user.id, photo)
    await client.send_message(message.from_user.id, '''
–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º, —Ç–æ –ø—Ä–æ—á–∏—Ç–∞–π "–ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üóí" –∏ –æ–∑–Ω–∞–∫–æ–º—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
"–ö–æ–º–∞–Ω–¥—ã ‚å®"    
    ''',
                              reply_markup=keyboard_client)


async def command_commands(message: types.Message):
    await client.send_message(message.from_user.id, texts.commands, reply_markup=types.ReplyKeyboardRemove())
    await client.send_message(message.from_user.id, '–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã',
                              reply_markup=keyboard_commands)


async def command_info(message: types.Message):
    await client.send_message(message.from_user.id, texts.info, reply_markup=keyboard_client)
    await message.answer('–°—Å—ã–ª–∫–∏:', reply_markup=inline_kb_client)


async def get_all_news(message: types.Message):
    with open('news_dict.json') as file:
        news_dict = json.load(file)

        for k, v in sorted(news_dict.items()):
            news = f'{hlink(v["article_title"], v["article_url"])}\n'

            await message.answer(news)


async def get_fresh_news(message: types.Message):
    fresh_news = check_news_update()

    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items()):
            news = f'{hlink(v["article_title"], v["article_url"])}\n'

            await message.answer(news)

    else:
        await message.answer('–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...')


async def subscribe(message: types.Message):
    if (not db.subs_exist(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subs(message.from_user.id)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subs(message.from_user.id, True)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


async def unsubscribe(message: types.Message):
    if (not db.subs_exist(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subs(message.from_user.id, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subs(message.from_user.id, False)

        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")


def register_handlers_client(dispatcher: Dispatcher):
    dispatcher.register_message_handler(command_start, commands=['start', 'help'])
    dispatcher.register_message_handler(command_info, lambda message: '–ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' in message.text)
    dispatcher.register_message_handler(command_commands, lambda message: '–ö–æ–º–∞–Ω–¥—ã' in message.text)
    dispatcher.register_message_handler(subscribe, lambda message: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' in message.text)
    dispatcher.register_message_handler(unsubscribe, lambda message: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' in message.text)
    dispatcher.register_message_handler(get_all_news, lambda message: '–í—Å–µ' in message.text)
    dispatcher.register_message_handler(get_fresh_news, lambda message: '–°–≤–µ–∂–∏–µ' in message.text)
